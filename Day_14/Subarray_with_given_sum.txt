Problem Description
Given an array of positive integers A and an integer B, find and return first continuous subarray which adds to B.

If the answer does not exist return an array with a single element "-1".

First sub-array means the sub-array for which starting index in minimum.



Problem Constraints
1 <= length of the array <= 100000
1 <= A[i] <= 109
1 <= B <= 109



Input Format
The first argument given is the integer array A.

The second argument given is integer B.



Output Format
Return the first continuous sub-array which adds to B and if the answer does not exist return an array with a single element "-1".



Example Input
Input 1:

 A = [1, 2, 3, 4, 5]
 B = 5
Input 2:

 A = [5, 10, 20, 100, 105]
 B = 110


Example Output
Output 1:

 [2, 3]
Output 2:

 -1


Example Explanation
Explanation 1:

 [2, 3] sums up to 5.
Explanation 2:

 No subarray sums up to required number.



 Solution:


 vector<int> Solution::solve(vector<int> &A, int B) {

    unordered_map <long long,long long> um;
    long long sum=0;
    vector <long long> C(A.size());


    for (int i=0; i<A.size(); i++){
        sum+=A[i];
        C[i]=sum;
        if (um.find(C[i])==um.end()){
            um[C[i]]=i;
        }
    }
    int starting=-1;
    int end=-1;

    if (um.find(B)!=um.end()){
        starting=0;
        end=um[B];

    }

    else {
        for (int i=1; i<C.size(); i++){
            if (um.find(B+C[i-1])!=um.end()){
                starting=i;
                end=um[B+C[i-1]];
                break;
            }
        }
    }

    if (starting==-1) return {-1};

    vector <int> arr;

    for (int i=starting; i<=end; i++){

        arr.push_back(A[i]);

    }


    return arr;


}




