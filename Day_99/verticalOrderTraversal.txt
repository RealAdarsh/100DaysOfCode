Problem Description
Given a binary tree, return a 2-D array with vertical order traversal of it. Go through the example and image for more details.


NOTE: If 2 Tree Nodes shares the same vertical level then the one with lesser depth will come first.



Problem Constraints
0 <= number of nodes <= 105



Input Format
First and only arument is a pointer to the root node of binary tree, A.



Output Format
Return a 2D array denoting the vertical order traversal of tree as shown.



Example Input
Input 1:

      6
    /   \
   3     7
  / \     \
 2   5     9
Input 2:

      1
    /   \
   3     7
  /       \
 2         9


Example Output
Output 1:

 [
    [2],
    [3],
    [6, 5],
    [7],
    [9]
 ]
Output 2:

 [
    [2],
    [3],
    [1],
    [7],
    [9]
 ]


Example Explanation
Explanation 1:

 First row represent the verical line 1 and so on.


 Solution:

 /**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<vector<int> > Solution::verticalOrderTraversal(TreeNode* A) {
    unordered_map <int, vector <int>>um;
    vector <vector <int>> sol;
    queue <pair<TreeNode *,int>> q;
    q.push({A,0});
    int miniD=1;
    int maxiD=-1;

    while(!q.empty()){
        TreeNode *temp=q.front().first;
        int level=q.front().second;
        q.pop();
        miniD=min(miniD, level);
        maxiD=max(maxiD,level);
        um[level].push_back(temp->val);
        if (temp->left){
            q.push({temp->left,level-1});
        }
        if(temp->right){
            q.push({temp->right,level+1});
        }
    }

    for (int i=miniD; i<=maxiD; i++){
        vector <int> temp;
        for (int j=0; j<um[i].size(); j++){
            temp.push_back(um[i][j]);
        }
        sol.push_back(temp);
    }

    return sol;
}


