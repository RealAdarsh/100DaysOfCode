Problem Description
Reverse a linked list A from position B to C.

NOTE: Do it in-place and in one-pass.



Problem Constraints
1 <= |A| <= 106

1 <= B <= C <= |A|



Input Format
The first argument contains a pointer to the head of the given linked list, A.

The second arugment contains an integer, B.

The third argument contains an integer C.



Output Format
Return a pointer to the head of the modified linked list.



Example Input
Input 1:

 A = 1 -> 2 -> 3 -> 4 -> 5
 B = 2
 C = 4

Input 2:

 A = 1 -> 2 -> 3 -> 4 -> 5
 B = 1
 C = 5


Example Output
Output 1:

 1 -> 4 -> 3 -> 2 -> 5
Output 2:

 5 -> 4 -> 3 -> 2 -> 1


Example Explanation
Explanation 1:

 In the first example, we want to reverse the highlighted part of the given linked list : 1 -> 2 -> 3 -> 4 -> 5 
 Thus, the output is 1 -> 4 -> 3 -> 2 -> 5 
Explanation 2:

 In the second example, we want to reverse the highlighted part of the given linked list : 1 -> 4 -> 3 -> 2 -> 5  
 Thus, the output is 5 -> 4 -> 3 -> 2 -> 1 


 Solution:

 /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

void reverse(ListNode *head){
    ListNode *current=head;
    ListNode *prev=NULL;
    ListNode  *future;

    while(current!=NULL){
        future=current->next;
        current->next=prev;
        prev=current;
        current=future;
    }
}

ListNode* Solution::reverseBetween(ListNode* A, int B, int C) {
    ListNode *first=NULL;
    ListNode *last=NULL;
    ListNode *from=NULL;
    ListNode *to=NULL;
    int count=0;
    ListNode *current=A;

    while(current!=NULL){
        count++;

        if (count<B){
            first=current;
        }
        if (count==B){
            from=current;
        }
        if (count==C){
            to=current;
            last=to->next;
            break;
        }
        current=current->next;
    }

    //last=to->next;
    to->next=NULL;

    reverse(from);

    if (first){
        first->next=to;
    }
    else {
        A=to;
    }

    from->next=last;

    return A;
}

