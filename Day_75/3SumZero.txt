Problem Description

Given an array A of N integers, are there elements a, b, c in S such that a + b + c = 0

Find all unique triplets in the array which gives the sum of zero.

Note:

Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c) The solution set must not contain duplicate triplets.



Problem Constraints

0 <= N <= 7000

-108 <= A[i] <= 108



Input Format

Single argument representing a 1-D array A.



Output Format

Output a 2-D vector where each row represent a unique triplet.



Example Input

A = [-1,0,1,2,-1,4]


Example Output

[ [-1,0,1],
  [-1,-1,2] ]


Example Explanation

Out of all the possible triplets having total sum zero,only the above two triplets are unique.


Solution: 


vector<vector<int> > Solution::threeSum(vector<int> &A) {

    sort(A.begin(), A.end());

    vector <vector <int>> sol;

    int n=A.size();

    for (int i=0; i<A.size(); i++){
        if (i>0 && A[i]==A[i-1]) continue;

        int j=i+1;
        int k=A.size()-1;
        int sum=0-A[i];

        while(j<k){
            if (A[j]+A[k]==sum){
                vector <int> temp;
                temp.push_back(A[i]);
                temp.push_back(A[j]);
                temp.push_back(A[k]);

                sol.push_back(temp);

                while(i<n && A[j]==A[j+1])j++;
                while(j<n && A[k]==A[k-1])k--;

                j++;
                k--;
            }

            else if (A[j]+A[k] < sum){
                j++;
            }

            else{
                k--;
            }
        }
    }

    return sol;

}

