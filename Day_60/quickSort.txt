Problem Description

Given an integer array A, sort the array using QuickSort.



Problem Constraints

1 <= |A| <= 105

1 <= A[i] <= 109



Input Format

First argument is an integer array A.



Output Format

Return the sorted array.



Example Input

Input 1:

 A = [1, 4, 10, 2, 1, 5]
Input 2:

 A = [3, 7, 1]


Example Output

Output 1:

 [1, 1, 2, 4, 5, 10]
Output 2:

 [1, 3, 7]


Example Explanation

Explanation 1:

 Return the sorted array.

 Solution:

 int rearrange(vector <int> &A, int start, int end){
    int pivot=start;
    int high=end;
    int low=start+1;

    while (low<=high){
        if (A[low] <= A[pivot]){
            low++;
        }
        else if (A[high] > A[pivot]){
            high--;
        }
        else {
            swap(A[low], A[high]);
        }
    }

    swap(A[pivot], A[low-1]);

    return low-1;
}

void quickSort(vector <int> &A, int start, int end){
    //sanity
    if (start >= end) return;
    int pivotIndex= rearrange(A, start, end);
    quickSort(A, start, pivotIndex-1);
    quickSort(A, pivotIndex+1, end);
    return;
}


vector<int> Solution::solve(vector<int> &A) {
    int n=A.size()-1;
    quickSort(A, 0, n);

    return A;
}

// 1, 4, 10, 2, 1, 5
//start=0;
//end=5
//pivot=rea
