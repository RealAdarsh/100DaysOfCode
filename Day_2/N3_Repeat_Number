iProblem Description
You're given a read-only array of N integers. Find out if any integer occurs more than N/3 times in the array in linear time and constant additional space.
If so, return the integer. If not, return -1.

If there are multiple solutions, return any one.



Problem Constraints
1 <= N <= 7*105
1 <= A[i] <= 109


Input Format
The only argument is an integer array A.


Output Format
Return an integer.


Example Input
[1 2 3 1 1]


Example Output
1


Example Explanation
1 occurs 3 times which is more than 5/3 times.


Approach:

If we remove three distinct elements, then the majority element will be still in the majority.

There could not be more than 2 majority elements.


int Solution::repeatedNumber(const vector<int> &A) {


    int ME1=INT_MAX;
    int ME2=INT_MAX;
    int count1=0;
    int count2=0;

    for (int i=0; i<A.size();i++){

         if (count1==0 && ME2!=A[i]) {
            ME1=A[i];
            count1++;
        }

        else if (ME1==A[i]) count1++;

        else if (count2==0 && ME1 != A[i]){
            ME2=A[i];
            count2++;
        }

        else if (ME2==A[i]) count2++;


        else{
            count1--;
            count2--;
        }
    }

    count1=0; count2=0;

    for (int i=0; i<A.size(); i++){
        if (A[i]==ME1) count1++;
        if (A[i]==ME2) count2++;
    }

    if (count1>A.size()/3) return ME1;
    if (count2 > A.size()/3) return ME2;

    return -1;

