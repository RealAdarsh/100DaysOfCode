Problem Description
You are given three positive integers, A, B, and C.

Any positive integer is magical if divisible by either B or C.

Return the Ath smallest magical number. Since the answer may be very large, return modulo 109 + 7.



Problem Constraints
1 <= A <= 109

2 <= B, C <= 40000



Input Format
The first argument given is an integer A.

The second argument given is an integer B.

The third argument given is an integer C.



Output Format
Return the Ath smallest magical number. Since the answer may be very large, return modulo 109 + 7.



Example Input
Input 1:

 A = 1
 B = 2
 C = 3
Input 2:

 A = 4
 B = 2
 C = 3


Example Output
Output 1:

 2
Output 2:

 6


Example Explanation
Explanation 1:

 1st magical number is 2.
Explanation 2:

 First four magical numbers are 2, 3, 4, 6 so the 4th magical number is 6.



Solution:

#define m 1000000007

int gcd(int a, int b){
    if (a==0) return b; 
    return gcd(b%a, a); 
}


int Solution::solve(int A, int B, int C) {
    long long start=min(B,C); 
    long long end=A*start; 
    long long lcm=((long)(B*C))/gcd(B,C); 

    long long result= -1; 

    // Total number of number less than x divisble by B -> x/B
    // Total number of number less than x divisble by B -> x/B
    // x=16 , B=3 -> 3,6,9,12,15 == X/B= 5
    // multiples of C less than x  == x/C
    // 2, 3
    // 2 3 4 [6] 8 9 10 [12]
    // lcm(2,3) = 6 
    // total factors before X= X/B + X/C - X/lcm(b,c)


    while (start<=end){

        long long mid=start + (end-start)/2; 
        long long multiplesB= mid/B; 
        long long multiplesC= mid/C;
        long long multiplesLcm= mid/lcm;  
        long long totalMultiples = multiplesB + multiplesC- multiplesLcm ; 
    

        if (totalMultiples < A){
            start=mid+1;
            
        }
        else {
            end=mid-1;  
            result=mid;  
        }
    }

    return (int)(result%m); 

}


