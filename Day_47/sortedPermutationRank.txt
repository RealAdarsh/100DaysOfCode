Problem Description
Given a string A. Find the rank of the string amongst its permutations sorted lexicographically.
Assume that no characters are repeated.

Note: The answer might not fit in an integer, so return your answer % 1000003



Problem Constraints
1 <= |A| <= 1000



Input Format
First argument is a string A.



Output Format
Return an integer denoting the rank of the given string.



Example Input
Input 1:

A = "acb"
Input 2:

A = "a"


Example Output
Output 1:

2
Output 2:

1


Example Explanation
Explanation 1:

Given A = "acb".
The order permutations with letters 'a', 'c', and 'b' : 
abc
acb
bac
bca
cab
cba
So, the rank of A is 2.
Explanation 2:

Given A = "a".
Rank is clearly 1.


Solution:

#define m 1000003

void factorial(vector <long long> &fact){
    fact[0]=1;

    for (int i=1; i<fact.size(); i++){
        fact[i]=(fact[i-1]*i)%m;
    }

}

int findPlace(string A, int low){
    int place=0;

    for (int i=low+1; i<A.size(); i++){
        if (A[low]>=A[i]){
            place++;
        }
    }

    return place;

}



int Solution::findRank(string A) {
   int size=A.size();
   vector <long long> fact(size);
   factorial(fact);
   long long place=1;
   int k=A.size()-1;

   for (int i=0; i<size; i++){
       int temp=findPlace(A, i);
       place = (place%m + ((long long)temp*fact[k])%m)%m;
       k--;

   }

   return (int) place;
}

