Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

 

Example 1:


Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.
Example 2:


Input: heights = [2,4]
Output: 4
 

Constraints:

1 <= heights.length <= 105
0 <= heights[i] <= 104


Solution:

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {

        int area=0;
        int n=heights.size();

        vector <int> SL(n,-1);
        vector <int> SR(n,n);

        stack <int> st;
        st.push(0);

        for (int i=1; i<n; i++){
            while (!st.empty() && heights[i] <=heights[st.top()]){
                st.pop();
            }

            if (!st.empty()) SL[i]=st.top();
            st.push(i);
        }

        while(!st.empty()) st.pop();

        st.push(n-1);

        for (int i=n-2; i>=0; i--){
            while (!st.empty() && heights[i] <=heights[st.top()]){
                st.pop();
            }

            if (!st.empty()) SR[i]=st.top();
            st.push(i);
        }


        for (int i=0; i<heights.size(); i++){
            int smallLeft=SL[i];
            int smallRight=SR[i];

            //if (smallRight==-1) smallRight=i+1;
           //if (smallLeft==-1) smallLeft=i-1;

            int width=smallRight-smallLeft -1;
            int h=heights[i];

            area=max(area, h*width);
        }


        return area;
    }
}
