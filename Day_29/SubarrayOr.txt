Problem Description
You are given an array of integers A of size N.

The value of a subarray is defined as BITWISE OR of all elements in it.

Return the sum of value of all subarrays of A % 109 + 7.



Problem Constraints
1 <= N <= 105

1 <= A[i] <= 108



Input Format
The first argument given is the integer array A.



Output Format
Return the sum of Value of all subarrays of A % 109 + 7.



Example Input
Input 1:

 A = [1, 2, 3, 4, 5]
Input 2:

 A = [7, 8, 9, 10]


Example Output
Output 1:

 71
Output 2:

 110


Example Explanation
Explanation 1:

 Value([1]) = 1
 Value([1, 2]) = 3
 Value([1, 2, 3]) = 3
 Value([1, 2, 3, 4]) = 7
 Value([1, 2, 3, 4, 5]) = 7
 Value([2]) = 2
 Value([2, 3]) = 3
 Value([2, 3, 4]) = 7
 Value([2, 3, 4, 5]) = 7
 Value([3]) = 3
 Value([3, 4]) = 7
 Value([3, 4, 5]) = 7
 Value([4]) = 4
 Value([4, 5]) = 5
 Value([5]) = 5
 Sum of all these values = 71
Explanation 2:

 Sum of value of all subarray is 110.



 Solution:




int checkBits(int num, int i){
    if ((num>>i)&1) return 1;
    return 0;
}

int Solution::solve(vector<int> &A) {
    long long n=(long long)A.size();
    long long totalSubArr=((n%1000000007)*((n+1)%1000000007)%1000000007)/2;
    long long finalSum=0;

    for (int i=0; i<32; i++){
        long long count=0;
        long long subArr=totalSubArr;
        for (int j=0; j<A.size(); j++){
            if (!checkBits(A[j],i)){
                count++;
            }
            else {
                subArr=((subArr%1000000007)-(((count)*(count+1)/2)%1000000007) + 1000000007 )%1000000007;
                count=0;
            }
        }
        subArr=(subArr%1000000007-((((count%1000000007)*((count+1)%1000000007)+ 1000000007)%1000000007)/2))%1000000007;
        finalSum=((finalSum%1000000007 + (subArr*((1<<i)%1000000007))%1000000007))%1000000007;
        finalSum=finalSum%1000000007;
    }

    return (int)finalSum;
}

