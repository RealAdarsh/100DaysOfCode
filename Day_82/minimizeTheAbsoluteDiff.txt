Given three sorted arrays A, B and Cof not necessarily same sizes.

Calculate the minimum absolute difference between the maximum and minimum number from the triplet a, b, c such that a, b, c belongs arrays A, B, C respectively. i.e. minimize | max(a,b,c) - min(a,b,c) |.

Example :

Input:

A : [ 1, 4, 5, 8, 10 ]
B : [ 6, 9, 15 ]
C : [ 2, 3, 6, 6 ]
Output:

1
Explanation: We get the minimum difference for a=5, b=6, c=6 as | max(a,b,c) - min(a,b,c) | = |6-5| = 1.

Solution:

int Solution::solve(vector<int> &A, vector<int> &B, vector<int> &C) {
    int i,j,k;
    i=j=k=0;
    int sol= INT_MAX;

    while(i<A.size() && j<B.size() && k<C.size()){
        int a=A[i];
        int b=B[j];
        int c=C[k];
        int maxi=max({a,b,c});
        int mini=min({a,b,c});
        sol=min(sol, maxi-mini);
        if (a==mini) i++;
        else if (b==mini) j++;
        else k++;

    }
    return sol;
}

