Problem Description
Given an array of integers A. If i < j and A[i] > A[j], then the pair (i, j) is called an inversion of A. Find the total number of inversions of A modulo (109 + 7).



Problem Constraints
1 <= length of the array <= 100000

1 <= A[i] <= 10^9



Input Format
The only argument given is the integer array A.



Output Format
Return the number of inversions of A modulo (109 + 7).



Example Input
Input 1:

A = [3, 2, 1]
Input 2:

A = [1, 2, 3]


Example Output
Output 1:

3
Output 2:

0


Example Explanation
Explanation 1:

 All pairs are inversions.
Explanation 2:

 No inversions.

 Solution:

 #define m 1000000007

int Merge(vector <int> &arr, vector <int> &aux, int start, int mid, int high)
{
    int k = start, i = start, j = mid + 1;
    int inversionCount = 0;

    while (i <= mid && j <= high)
    {
        if (arr[i] <= arr[j]) {
            aux[k++] = arr[i++];
        }
        else {
            aux[k++] = arr[j++];
            inversionCount=inversionCount%m;
            inversionCount += (mid - i + 1)%m;
            inversionCount=inversionCount%m;
        }
    }

    while (i <= mid) {
        aux[k++] = arr[i++];
    }

    for (int i = start; i <= high; i++) {
        arr[i] = aux[i];
    }

    return inversionCount;
}


int MergeSort(vector <int> &arr, vector <int> &aux, int start, int high)
{

    if (high <= start) {
        return 0;
    }

    int mid = (start + ((high - start) >> 1));
    int inversionCount = 0;
    inversionCount=inversionCount%m;
    inversionCount += MergeSort(arr, aux, start, mid)%m;
    inversionCount=inversionCount%m;;

    inversionCount += MergeSort(arr, aux, mid + 1, high)%m;
    inversionCount=inversionCount%m;


    inversionCount += Merge(arr, aux, start, mid, high)%m;
    inversionCount=inversionCount%m;

    return inversionCount;
}


int Solution::solve(vector<int> &A) {

    vector <int> aux;

    for (int i=0; i<A.size(); i++){
        aux.push_back(A[i]);
    }

    return MergeSort(A,aux,0, A.size()-1);
}

