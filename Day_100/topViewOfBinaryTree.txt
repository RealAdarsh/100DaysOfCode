Problem Description
Given a binary tree of integers denoted by root A. Return an array of integers representing the top view of the Binary tree.

The top view of a Binary Tree is a set of nodes visible when the tree is visited from the top.

Return the nodes in any order.



Problem Constraints
1 <= Number of nodes in binary tree <= 100000

0 <= node values <= 10^9



Input Format
First and only argument is head of the binary tree A.



Output Format
Return an array, representing the top view of the binary tree.



Example Input
Input 1:

 
            1
          /   \
         2    3
        / \  / \
       4   5 6  7
      /
     8 
Input 2:

 
            1
           /  \
          2    3
           \
            4
             \
              5


Example Output
Output 1:

 [1, 2, 4, 8, 3, 7]
Output 2:

 [1, 2, 3]


Example Explanation
Explanation 1:

Top view is described.
Explanation 2:

Top view is described.

Solution:

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
vector<int> Solution::solve(TreeNode* A) {
    vector <int> topView;
    queue <pair<TreeNode *,int>> q;
    q.push({A,0});
    unordered_map <int,vector <int>> um;
    int startLevel=1;
    int endLevel=-1;

    while(!q.empty()){
        TreeNode *root=q.front().first;
        int level=q.front().second;
        startLevel=min(startLevel, level);
        endLevel=max(endLevel, level);

        q.pop();
        um[level].push_back(root->val);

        if (root->left) {
            q.push({root->left, level-1});
        }

        if (root->right){
            q.push({root->right, level+1});
        }
    }

    for (int i=startLevel; i<=endLevel; i++){
        topView.push_back(um[i][0]);
    }

    return topView;

}

