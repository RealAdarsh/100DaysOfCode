Problem Description
Sort a linked list, A in O(n log n) time using constant space complexity.



Problem Constraints
0 <= |A| = 105



Input Format
The first and the only arugment of input contains a pointer to the head of the linked list, A.



Output Format
Return a pointer to the head of the sorted linked list.



Example Input
Input 1:

A = [3, 4, 2, 8]
Input 2:

A = [1]


Example Output
Output 1:

[2, 3, 4, 8]
Output 2:

[1]


Example Explanation
Explanation 1:

 The sorted form of [3, 4, 2, 8] is [2, 3, 4, 8].
Explanation 2:

 The sorted form of [1] is [1].



 Solution:


 /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
ListNode *findMid(ListNode *A){
    if (A==NULL || A->next==NULL) return A;
    ListNode *fast=A;
    ListNode *slow=A;

    while(fast->next!=NULL && fast->next->next!=NULL){
        fast=fast->next->next;
        slow=slow->next;
    }
    return slow;

}

ListNode *merge(ListNode *A, ListNode *B){
    if (A==NULL) return B;
    if (B==NULL) return A;
    ListNode *temp;
    ListNode *ans;

    if (A->val <= B->val){
        temp=A;
        ans=A;
        A=A->next;
    }
    else {
        temp=B;
        ans=B;
        B=B->next;
    }

    while(A!=NULL && B!=NULL){
        if (A->val <= B->val){
            temp->next=A;
            A=A->next;
            temp=temp->next;
        }
        else{
            temp->next=B;
            B=B->next;
            temp=temp->next;
        }
    }

    if (A!=NULL){
        temp->next=A;
    }
    if (B!=NULL){
        temp->next=B;
    }

    return ans;
}


ListNode* Solution::sortList(ListNode* A) {
    // sanity
    if (A==NULL) return A;
    // base case
    if (A->next==NULL) return A;

    // recursion

    ListNode *mid= findMid(A);
    ListNode *headR=mid->next;
    ListNode *headL=A;
    mid->next=NULL;

    return merge(sortList(headL), sortList(headR));
}

